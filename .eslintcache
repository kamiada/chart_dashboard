[{"/Users/adriannak/Desktop/chart_dashboard/src/index.js":"1","/Users/adriannak/Desktop/chart_dashboard/src/reportWebVitals.js":"2","/Users/adriannak/Desktop/chart_dashboard/src/App.jsx":"3","/Users/adriannak/Desktop/chart_dashboard/src/components/Subpage.jsx":"4","/Users/adriannak/Desktop/chart_dashboard/src/components/Barchart.jsx":"5","/Users/adriannak/Desktop/chart_dashboard/src/components/Header.jsx":"6","/Users/adriannak/Desktop/chart_dashboard/src/constants.js":"7","/Users/adriannak/Desktop/chart_dashboard/src/components/index.js":"8","/Users/adriannak/Desktop/chart_dashboard/src/components/Doughnut.jsx":"9","/Users/adriannak/Desktop/chart_dashboard/src/components/BubbleChart.jsx":"10"},{"size":500,"mtime":1611833290850,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611833290850,"results":"13","hashOfConfig":"12"},{"size":8234,"mtime":1617058343041,"results":"14","hashOfConfig":"12"},{"size":1215,"mtime":1611833290849,"results":"15","hashOfConfig":"12"},{"size":1283,"mtime":1617057338308,"results":"16","hashOfConfig":"12"},{"size":261,"mtime":1614938772221,"results":"17","hashOfConfig":"12"},{"size":989,"mtime":1614815599044,"results":"18","hashOfConfig":"12"},{"size":161,"mtime":1614952379276,"results":"19","hashOfConfig":"12"},{"size":1020,"mtime":1614987804474,"results":"20","hashOfConfig":"12"},{"size":1034,"mtime":1614952744157,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"59sh11",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"/Users/adriannak/Desktop/chart_dashboard/src/index.js",[],["45","46"],"/Users/adriannak/Desktop/chart_dashboard/src/reportWebVitals.js",[],"/Users/adriannak/Desktop/chart_dashboard/src/App.jsx",["47","48"],"import React, { Component, Fragment } from \"react\";\nimport Header from \"./components/Header\";\nimport { Barchart, Doughnut, BubbleChart } from \"./components\";\nimport Subpage from \"./components/Subpage\";\nimport \"./components/components.scss\";\nimport euStaticData from \"./EUcovidData.json\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { months, years, parameters } from \"./constants\";\n\nconst removeDuplicates = (array) => {\n  let sorted_arr = array.slice().sort();\n  let results = [];\n  for (let i = 0; i < sorted_arr.length - 1; i++) {\n    if (sorted_arr[i + 1] === sorted_arr[i]) {\n      results.push(sorted_arr[i]);\n    }\n  }\n  return sorted_arr;\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFilters: {\n        parameters: [],\n        country: [],\n        month: [],\n        year: [],\n      },\n      results: {\n        type: [],\n        number: [],\n        countries: [],\n        dates: [],\n      },\n      clicked: false,\n    };\n    this.getCountries = this.getCountries.bind(this);\n    this.submit = this.submit.bind(this);\n    this.getResults = this.getResults.bind(this);\n    this.addFiltersIntoAnArray = this.addFiltersIntoAnArray.bind(this);\n  }\n  getCountries() {\n    let results = [];\n    euStaticData.records.forEach((item) => {\n      if (\n        !results.some((entry) => entry.value === item.countriesAndTerritories)\n      ) {\n        results.push({\n          type: \"country\",\n          label: item.countriesAndTerritories,\n          value: item.countriesAndTerritories,\n        });\n      }\n    });\n    return results;\n  }\n  //date format is always DD/MM/YYYY\n  changeIntoMonth = (str) => str.substring(3, 5);\n  changeIntoYear = (str) => str.substring(6, 10);\n  //check duplicates\n  checkDuplicates = (arrayToCheck, valueToCheck) =>\n    arrayToCheck.includes(valueToCheck);\n  //sum the numbers in array\n  sumTheArray = (array) =>\n    array.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n\n  addFiltersIntoAnArray(value) {\n    const unique_value = removeDuplicates(value.flat());\n    unique_value.forEach((element) => {\n      if (element.type === \"parameters\") {\n        if (\n          !this.checkDuplicates(\n            this.state.selectedFilters.parameters,\n            element.value\n          )\n        ) {\n          this.state.selectedFilters.parameters.push(element.value);\n        }\n      }\n      if (element.type === \"country\") {\n        if (\n          !this.checkDuplicates(\n            this.state.selectedFilters.country,\n            element.value\n          )\n        ) {\n          this.state.selectedFilters.country.push(element.value);\n        }\n      }\n      if (element.type === \"month\") {\n        if (\n          !this.checkDuplicates(this.state.selectedFilters.month, element.value)\n        ) {\n          this.state.selectedFilters.month.push(element.value);\n        }\n      }\n      if (element.type === \"year\") {\n        if (\n          !this.checkDuplicates(this.state.selectedFilters.year, element.value)\n        ) {\n          this.state.selectedFilters.year.push(element.value);\n        }\n      }\n    });\n  }\n\n  getResults = (filtersObject) => {\n    //get results will need to look differently-\n    //get the data per country and keep assigned to per country\n    //then get the data per another country\n    //in other words I will need an array of objects?...\n\n    const results = euStaticData.records.filter(\n      (data) =>\n        filtersObject.country.includes(data.countriesAndTerritories) &&\n        filtersObject.month.includes(this.changeIntoMonth(data.dateRep))\n    );\n    //at this point results are an array of objects\n    console.log(\"search1\", results);\n    results.forEach((value) => {\n      if (value.dateRep) {\n        this.state.results.dates.push(value.dateRep);\n      }\n      if (value.countriesAndTerritories) {\n        if (\n          !this.checkDuplicates(\n            this.state.results.countries,\n            value.countriesAndTerritories\n          )\n        ) {\n          this.state.results.countries.push(value.countriesAndTerritories);\n        }\n      }\n      if (this.checkDuplicates(filtersObject.parameters, \"cases_weekly\")) {\n        this.state.results.number.push(value.cases_weekly);\n        if (\n          !this.checkDuplicates(\n            this.state.results.type,\n            \"Number of Cases Weekly\"\n          )\n        ) {\n          this.state.results.type.push(\"Number of Cases Weekly\");\n        }\n      }\n      if (this.checkDuplicates(filtersObject.parameters, \"deaths_weekly\")) {\n        this.state.results.number.push(value.deaths_weekly);\n        if (\n          !this.checkDuplicates(\n            this.state.results.type,\n            \"Number of Deaths Weekly\"\n          )\n        ) {\n          this.state.results.type.push(\"Number of Deaths Weekly\");\n        }\n      }\n      if (\n        this.checkDuplicates(filtersObject.parameters, \"cases_weekly\") &&\n        this.checkDuplicates(filtersObject.parameters, \"deaths_weekly\")\n      ) {\n        this.state.results.number.push(value.cases_weekly);\n        this.state.results.number.push(value.deaths_weekly);\n        if (\n          !this.checkDuplicates(\n            this.state.results.type,\n            \"Number of Deaths Weekly\"\n          ) &&\n          !this.checkDuplicates(\n            this.state.results.type,\n            \"Number of Cases Weekly\"\n          )\n        ) {\n          this.state.results.type.push(\"Number of Deaths and Cases Weekly\");\n        }\n      }\n    });\n    console.log(this.state.results.number);\n    console.log(this.state.results, \"state\");\n  };\n\n  submit = (filters) => {\n    if (\n      filters.parameters.length > 0 &&\n      filters.country.length > 0 &&\n      filters.month.length > 0 &&\n      filters.year.length > 0\n    ) {\n      this.getResults(filters);\n      this.setState({\n        clicked: true,\n      });\n    }\n  };\n\n  reset() {\n    this.setState({\n      selectedFilters: {\n        parameters: [],\n        country: [],\n        month: [],\n        year: [],\n      },\n      results: {\n        type: [],\n        number: [],\n        countries: [],\n        dates: [],\n      },\n      clicked: false,\n    });\n  }\n\n  render() {\n    const countries = this.getCountries();\n    const animatedComponents = makeAnimated();\n    const { selectedFilters, results, clicked } = this.state;\n    console.log(this.sumTheArray(results.number));\n    console.log(results.countries);\n    console.log(results.number);\n    return (\n      <div>\n        <Header />\n        <Subpage />\n        <div className=\"container-dropdown\">\n          {/* parameters: number of cases (monthly), number of deaths (monthly) */}\n          <Select\n            closeMenuOnSelect={true}\n            components={animatedComponents}\n            isMulti\n            options={parameters}\n            onChange={this.addFiltersIntoAnArray}\n          />\n          {/* country */}\n          <Select\n            closeMenuOnSelect={false}\n            components={animatedComponents}\n            isMulti\n            options={countries}\n            onChange={this.addFiltersIntoAnArray}\n          />\n          {/* month */}\n          <Select\n            closeMenuOnSelect={false}\n            components={animatedComponents}\n            isMulti\n            options={months}\n            onChange={this.addFiltersIntoAnArray}\n          />\n          {/* year */}\n          <Select\n            closeMenuOnSelect={true}\n            components={animatedComponents}\n            isMulti\n            options={years}\n            onChange={this.addFiltersIntoAnArray}\n          />\n          <button\n            className=\"main_page_btn\"\n            onClick={() => this.submit(selectedFilters)}\n          >\n            Search\n          </button>\n\n          {this.state.clicked === true && (\n            <button className=\"main_page_btn\" onClick={() => this.reset()}>\n              Reset\n            </button>\n          )}\n        </div>\n        <div className=\"container\">\n          {clicked === true && results && results.countries.length <= 1 && (\n            <Fragment>\n              <Barchart labels=\"test\" inputData={results} />\n            </Fragment>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/adriannak/Desktop/chart_dashboard/src/components/Subpage.jsx",[],"/Users/adriannak/Desktop/chart_dashboard/src/components/Barchart.jsx",[],"/Users/adriannak/Desktop/chart_dashboard/src/components/Header.jsx",[],"/Users/adriannak/Desktop/chart_dashboard/src/constants.js",[],"/Users/adriannak/Desktop/chart_dashboard/src/components/index.js",[],"/Users/adriannak/Desktop/chart_dashboard/src/components/Doughnut.jsx",[],"/Users/adriannak/Desktop/chart_dashboard/src/components/BubbleChart.jsx",["49"],"import Chart from \"chart.js\";\nimport React, { Component } from \"react\";\nimport \"./components.scss\";\n\nconst popData = {\n    datasets: [{\n      label: ['Deer Population'],\n      data: [{\n        x: 100,\n        y: 0,\n        r: 10\n      }, {\n        x: 60,\n        y: 30,\n        r: 20\n      }, {\n        x: 40,\n        y: 60,\n        r: 25\n      }, {\n        x: 80,\n        y: 80,\n        r: 50\n      }, {\n        x: 20,\n        y: 30,\n        r: 25\n      }, {\n        x: 0,\n        y: 100,\n        r: 5\n      }],\n      backgroundColor: \"#FF9966\"\n    }]\n  };\nclass BubbleChart extends Component {\n    chartRef = React.createRef();\n    componentDidMount() {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n            type: \"bubble\",\n            data: this.props.bubbleData\n        });\n    }\n    render(){\n        return(\n            <div className=\"item\">\n                <canvas id=\"BubbleChart\" ref={this.chartRef} />\n            </div>\n        )\n    }\n}\nexport default BubbleChart;",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":20,"nodeType":"56","messageId":"57","endLine":3,"endColumn":28},{"ruleId":"54","severity":1,"message":"58","line":3,"column":30,"nodeType":"56","messageId":"57","endLine":3,"endColumn":41},{"ruleId":"54","severity":1,"message":"59","line":5,"column":7,"nodeType":"56","messageId":"57","endLine":5,"endColumn":14},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'Doughnut' is defined but never used.","Identifier","unusedVar","'BubbleChart' is defined but never used.","'popData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]